import type { Container } from "./Container";
import type { IVelocity } from "./Interfaces/IVelocity";
import type { IParticleValueAnimation } from "./Interfaces/IParticleValueAnimation";
import type { ICoordinates } from "./Interfaces/ICoordinates";
import type { IParticleImage } from "./Interfaces/IParticleImage";
import { Updater } from "./Particle/Updater";
import type { IHsl, IRgb } from "./Interfaces/Colors";
import type { IStroke } from "../Options/Interfaces/Particles/IStroke";
import type { IShapeValues } from "../Options/Interfaces/Particles/Shape/IShapeValues";
import type { IBubbleParticleData } from "./Interfaces/IBubbleParticleData";
import type { IParticle } from "./Interfaces/IParticle";
import type { IParticles } from "../Options/Interfaces/Particles/IParticles";
import { Particles } from "../Options/Classes/Particles/Particles";
import { MoveDirection, MoveDirectionAlt, ShapeType } from "../Enums";
import type { RecursivePartial } from "../Types";
import { Infecter } from "./Particle/Infecter";
import type { IDelta } from "./Interfaces/IDelta";
import { Mover } from "./Particle/Mover";
import type { ILink } from "./Interfaces/ILink";
export declare class Particle implements IParticle {
    readonly id: number;
    private readonly container;
    pathAngle: number;
    destroyed: boolean;
    lifeDelay: number;
    lifeDelayTime: number;
    lifeDuration: number;
    lifeTime: number;
    livesRemaining: number;
    misplaced: boolean;
    spawning: boolean;
    lastNoiseTime: number;
    readonly noiseDelay: number;
    readonly updater: Updater;
    readonly infecter: Infecter;
    readonly mover: Mover;
    readonly sides: number;
    readonly strokeWidth: number;
    readonly particlesOptions: Particles;
    links: ILink[];
    randomIndexData?: number;
    linksDistance?: number;
    linksWidth?: number;
    maxDistance?: number;
    moveSpeed?: number;
    sizeValue?: number;
    sizeAnimationSpeed?: number;
    readonly close: boolean;
    readonly direction: MoveDirection | keyof typeof MoveDirection | MoveDirectionAlt;
    readonly fill: boolean;
    readonly stroke: IStroke;
    readonly position: ICoordinates;
    readonly offset: ICoordinates;
    readonly shadowColor: IRgb | undefined;
    readonly color: IParticleValueAnimation<IHsl | undefined>;
    readonly opacity: IParticleValueAnimation<number>;
    readonly rotate: IParticleValueAnimation<number>;
    readonly size: IParticleValueAnimation<number>;
    readonly strokeColor: IParticleValueAnimation<IHsl | undefined>;
    readonly velocity: IVelocity;
    readonly shape: ShapeType | string;
    readonly image?: IParticleImage;
    readonly initialPosition: ICoordinates;
    readonly initialVelocity: IVelocity;
    readonly shapeData?: IShapeValues;
    readonly bubble: IBubbleParticleData;
    constructor(id: number, container: Container, position?: ICoordinates, overrideOptions?: RecursivePartial<IParticles>);
    move(delta: IDelta): void;
    update(delta: IDelta): void;
    draw(delta: IDelta): void;
    getPosition(): ICoordinates;
    getRadius(): number;
    getFillColor(): IHsl | undefined;
    getStrokeColor(): IHsl | undefined;
    destroy(): void;
    private calcPosition;
    private calculateVelocity;
    private loadImageShape;
}
